// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: posts.sql

package db

import (
	"context"
)

const countPosts = `-- name: CountPosts :one
SELECT count(*) FROM posts
`

func (q *Queries) CountPosts(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countPosts)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createPost = `-- name: CreatePost :one
INSERT INTO posts (user_id, image_path)
VALUES ($1, $2) RETURNING id, user_id, image_path
`

type CreatePostParams struct {
	UserID    int32
	ImagePath string
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, createPost, arg.UserID, arg.ImagePath)
	var i Post
	err := row.Scan(&i.ID, &i.UserID, &i.ImagePath)
	return i, err
}

const deletPost = `-- name: DeletPost :exec
DELETE FROM posts WHERE id = $1
`

func (q *Queries) DeletPost(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deletPost, id)
	return err
}

const getPost = `-- name: GetPost :one
SELECT posts.id, posts.user_id, posts.image_path, users.name as user_name FROM posts 
INNER JOIN users ON posts.user_id = users.id
WHERE posts.id = $1
`

type GetPostRow struct {
	ID        int32
	UserID    int32
	ImagePath string
	UserName  string
}

func (q *Queries) GetPost(ctx context.Context, id int32) (GetPostRow, error) {
	row := q.db.QueryRowContext(ctx, getPost, id)
	var i GetPostRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ImagePath,
		&i.UserName,
	)
	return i, err
}

const getPostUserID = `-- name: GetPostUserID :one
SELECT user_id FROM posts WHERE posts.id = $1
`

func (q *Queries) GetPostUserID(ctx context.Context, id int32) (int32, error) {
	row := q.db.QueryRowContext(ctx, getPostUserID, id)
	var user_id int32
	err := row.Scan(&user_id)
	return user_id, err
}

const listPosts = `-- name: ListPosts :many
SELECT posts.id, posts.user_id, posts.image_path, users.name as user_name FROM posts 
INNER JOIN users ON posts.user_id = users.id
ORDER BY posts.id LIMIT $1 OFFSET $2
`

type ListPostsParams struct {
	Limit  int32
	Offset int32
}

type ListPostsRow struct {
	ID        int32
	UserID    int32
	ImagePath string
	UserName  string
}

func (q *Queries) ListPosts(ctx context.Context, arg ListPostsParams) ([]ListPostsRow, error) {
	rows, err := q.db.QueryContext(ctx, listPosts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListPostsRow
	for rows.Next() {
		var i ListPostsRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ImagePath,
			&i.UserName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
