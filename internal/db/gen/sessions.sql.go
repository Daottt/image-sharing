// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: sessions.sql

package db

import (
	"context"
	"database/sql"
)

const createSession = `-- name: CreateSession :one
INSERT INTO sessions (id, user_login, access_token, refresh_token, is_revoked, expires_at)
VALUES ($1, $2, $3, $4, $5, $6) RETURNING id, user_login, access_token, refresh_token, is_revoked, created_at, expires_at
`

type CreateSessionParams struct {
	ID           string
	UserLogin    string
	AccessToken  string
	RefreshToken string
	IsRevoked    bool
	ExpiresAt    sql.NullTime
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (Session, error) {
	row := q.db.QueryRowContext(ctx, createSession,
		arg.ID,
		arg.UserLogin,
		arg.AccessToken,
		arg.RefreshToken,
		arg.IsRevoked,
		arg.ExpiresAt,
	)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserLogin,
		&i.AccessToken,
		&i.RefreshToken,
		&i.IsRevoked,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const deletSession = `-- name: DeletSession :exec
DELETE FROM sessions WHERE id = $1
`

func (q *Queries) DeletSession(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deletSession, id)
	return err
}

const getSession = `-- name: GetSession :one
SELECT id, user_login, access_token, refresh_token, is_revoked, created_at, expires_at FROM sessions WHERE id = $1
`

func (q *Queries) GetSession(ctx context.Context, id string) (Session, error) {
	row := q.db.QueryRowContext(ctx, getSession, id)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserLogin,
		&i.AccessToken,
		&i.RefreshToken,
		&i.IsRevoked,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const renewSession = `-- name: RenewSession :exec
UPDATE sessions
SET access_token = $2
WHERE id = $1
`

type RenewSessionParams struct {
	ID          string
	AccessToken string
}

func (q *Queries) RenewSession(ctx context.Context, arg RenewSessionParams) error {
	_, err := q.db.ExecContext(ctx, renewSession, arg.ID, arg.AccessToken)
	return err
}

const revokeSession = `-- name: RevokeSession :exec
UPDATE sessions
SET is_revoked = TRUE
WHERE access_token = $1
`

func (q *Queries) RevokeSession(ctx context.Context, accessToken string) error {
	_, err := q.db.ExecContext(ctx, revokeSession, accessToken)
	return err
}

const revokeSessionsByLogin = `-- name: RevokeSessionsByLogin :exec
UPDATE sessions
SET is_revoked = TRUE
WHERE user_login = $1
`

func (q *Queries) RevokeSessionsByLogin(ctx context.Context, userLogin string) error {
	_, err := q.db.ExecContext(ctx, revokeSessionsByLogin, userLogin)
	return err
}
