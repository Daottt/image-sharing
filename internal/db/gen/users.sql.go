// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package db

import (
	"context"
	"database/sql"
)

const checkLoginExists = `-- name: CheckLoginExists :one
SELECT EXISTS (
    SELECT 1 FROM users_auth WHERE login = $1
)
`

func (q *Queries) CheckLoginExists(ctx context.Context, login string) (bool, error) {
	row := q.db.QueryRowContext(ctx, checkLoginExists, login)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (name, description)
VALUES ($1, $2) RETURNING id, name, description
`

type CreateUserParams struct {
	Name        string
	Description sql.NullString
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Name, arg.Description)
	var i User
	err := row.Scan(&i.ID, &i.Name, &i.Description)
	return i, err
}

const createUserAuth = `-- name: CreateUserAuth :exec
INSERT INTO users_auth (user_id ,login, password_hash)
VALUES ($1, $2, $3)
`

type CreateUserAuthParams struct {
	UserID       int32
	Login        string
	PasswordHash string
}

func (q *Queries) CreateUserAuth(ctx context.Context, arg CreateUserAuthParams) error {
	_, err := q.db.ExecContext(ctx, createUserAuth, arg.UserID, arg.Login, arg.PasswordHash)
	return err
}

const deletUser = `-- name: DeletUser :exec
DELETE FROM users WHERE id = $1
`

func (q *Queries) DeletUser(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deletUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, name, description FROM users WHERE id = $1
`

func (q *Queries) GetUser(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(&i.ID, &i.Name, &i.Description)
	return i, err
}

const getUserAuth = `-- name: GetUserAuth :one
SELECT user_id, login, password_hash, is_admin FROM users_auth WHERE login = $1 LIMIT 1
`

func (q *Queries) GetUserAuth(ctx context.Context, login string) (UsersAuth, error) {
	row := q.db.QueryRowContext(ctx, getUserAuth, login)
	var i UsersAuth
	err := row.Scan(
		&i.UserID,
		&i.Login,
		&i.PasswordHash,
		&i.IsAdmin,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, name, description FROM users
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(&i.ID, &i.Name, &i.Description); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
SET name = $2, description = $3
WHERE id = $1
`

type UpdateUserParams struct {
	ID          int32
	Name        string
	Description sql.NullString
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser, arg.ID, arg.Name, arg.Description)
	return err
}
